AWSTemplateFormatVersion: "2010-09-09"
Description: "Create Instance"

Parameters:
    RepoName:
        Type: String
        Description: "Name of the EC2 Instance"

    DomainName:
        Type: String
        Description: "Domain Name for the App"

    AMI:
        Type: String
        Default: "ami-075b06d55777be7cd" # ubuntu-jammy-22.04-arm64-server-20250516
        Description: "AMI ID"

    SubnetId:
        Type: String
        Default: "subnet-67aade1c"
        Description: "Subnet ID"

    InstanceType:
        Type: String
        Default: "t4g.medium"
        AllowedValues:
            - t4g.medium
            - t4g.large
        Description: "Instance Type"

    HostedZoneId:
        Type: String
        Default: "Z08784411CKA7I7L7VYPW" # videoken.dev
        Description: "Hosted Zone ID"


Resources:
    MySecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${AWS::StackName}-sg"
            GroupDescription: "Allow HTTP and HTTPS traffic"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0

    MyInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
                - !Ref MyEC2Role

    MyEC2Role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "${AWS::StackName}-EC2-Role"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ec2.amazonaws.com
                      Action: sts:AssumeRole
            Path: "/"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
            Policies:
                - PolicyName: Read-Account-Secrets
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "secretsmanager:GetSecretValue"
                            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
                - PolicyName: Read-Account-Parameters
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "ssm:GetParameter"
                            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"

    MainDNSRecordSet:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneId: !Ref HostedZoneId
            Name: !Ref DomainName
            Type: A
            TTL: "300"
            ResourceRecords:
                - !GetAtt [MyEC2Instance, PublicIp]

    SecondaryDNSRecordSet:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneId: !Ref HostedZoneId
            Name: !Sub "*.${DomainName}"
            Type: A
            TTL: "300"
            ResourceRecords:
                - !GetAtt [MyEC2Instance, PublicIp]

    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "${AWS::StackName}-Webhook-Lambda-Role"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: Lambda-SSM-Execution
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - ssm:SendCommand
                            Resource: "*"

    LambdaFunctionUrlPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:invokeFunctionUrl
            FunctionName: !Ref LambdaFunction
            Principal: "*"
            FunctionUrlAuthType: NONE

    LambdaFunctionUrl:
        Type: AWS::Lambda::Url
        Properties:
            TargetFunctionArn: !GetAtt LambdaFunction.Arn
            AuthType: NONE

    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${AWS::StackName}-Webhook-Lambda"
            Handler: index.lambda_handler
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: python3.12
            MemorySize: 128
            Timeout: 30
            Environment:
                Variables:
                    INSTANCE_ID: !Ref MyEC2Instance
            Code:
                ZipFile: !Sub |
                    import boto3
                    import os
                    import json
                    import logging

                    logger = logging.getLogger()
                    logger.setLevel(logging.INFO)

                    def lambda_handler(event, context):
                        logger.info(json.dumps(event, indent=4))

                        ssm_client = boto3.client('ssm')
                        instance_id = os.getenv('INSTANCE_ID')
                        command = 'su - ubuntu /home/ubuntu/deploy.sh'

                        response = ssm_client.send_command(
                            InstanceIds=[instance_id],
                            DocumentName='AWS-RunShellScript',
                            Parameters={'commands': [command]}
                        )
                        return "Done"

    MyEC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref AMI
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref MyInstanceProfile
            SecurityGroupIds:
                - !GetAtt [MySecurityGroup, GroupId]
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 25
                      VolumeType: gp3
                      Iops: 3000
                      DeleteOnTermination: true
            SubnetId: !Ref SubnetId
            Tags:
                - Key: "Name"
                  Value: !Ref AWS::StackName
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    HOME="/home/ubuntu"

                    curl -sLf https://dl.cloudsmith.io/public/caddy/stable/gpg.key | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
                    curl -sLf https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt -o /etc/apt/sources.list.d/caddy-stable.list
                    curl -sLf https://deb.nodesource.com/setup_20.x | bash

                    apt-get update -y
                    apt-get install -y debian-keyring debian-archive-keyring \
                        apt-transport-https awscli caddy python3-pip nodejs \
                        redis-server ffmpeg nfs-common zip jq ncdu tree imagemagick

                    sed -i 's/port 6379/port 6579/g' /etc/redis/redis.conf
                    systemctl restart redis-server

                    mkdir -m 775 -p /var/www/html
                    echo "<h2>Hello from Caddy!</h2>" > /var/www/html/index.html
                    chown -R ubuntu:sudo /var/www/html

                    cat <<EOF > /etc/caddy/Caddyfile
                    ${DomainName} {
                        root * /var/www/html
                        file_server

                        handle /app/* {
                            reverse_proxy localhost:8000
                        }
                        handle {
                            try_files {path} /index.html
                        }
                    }
                    lab.${DomainName} {
                        reverse_proxy localhost:8888
                    }
                    EOF
                    systemctl restart caddy

                    cat <<EOF > /etc/systemd/system/django.service
                    [Unit]
                    Description=Django Server
                    After=network.target

                    [Service]
                    User=ubuntu
                    Group=ubuntu
                    WorkingDirectory=$HOME/${RepoName}/server
                    Environment=REDIS_HOST=localhost
                    Environment=REDIS_PORT=6579
                    ExecStart=/usr/bin/python3 -m gunicorn --config gunicorn.conf.py core.wsgi

                    [Install]
                    WantedBy=multi-user.target
                    EOF
                    systemctl enable django

                    cat <<EOF > /etc/systemd/system/celery.service
                    [Unit]
                    Description=Celery Tasks
                    After=network.target

                    [Service]
                    User=ubuntu
                    Group=ubuntu
                    WorkingDirectory=$HOME/${RepoName}/server
                    Environment=REDIS_HOST=localhost
                    Environment=REDIS_PORT=6579
                    ExecStart=/usr/bin/python3 -m celery -A core worker --loglevel=info --concurrency=1 -Q primary

                    [Install]
                    WantedBy=multi-user.target
                    EOF
                    systemctl enable celery

                    cat <<EOF > /etc/systemd/system/beat.service
                    [Unit]
                    Description=Celery Beat
                    After=network.target

                    [Service]
                    User=ubuntu
                    Group=ubuntu
                    WorkingDirectory=$HOME/${RepoName}/server
                    Environment=REDIS_HOST=localhost
                    Environment=REDIS_PORT=6579
                    ExecStart=/usr/bin/python3 -m celery -A core beat --loglevel=info

                    [Install]
                    WantedBy=multi-user.target
                    EOF
                    systemctl enable beat

                    cat <<EOF > /etc/systemd/system/lab.service
                    [Unit]
                    Description=Django Lab
                    After=network.target

                    [Service]
                    User=ubuntu
                    Group=ubuntu
                    WorkingDirectory=$HOME/${RepoName}/server/notebooks
                    Environment="DJANGO_ALLOW_ASYNC_UNSAFE=true"
                    Environment=REDIS_HOST=localhost
                    Environment=REDIS_PORT=6579
                    ExecStart=/usr/bin/python3 ../manage.py shell_plus --lab

                    [Install]
                    WantedBy=multi-user.target
                    EOF
                    systemctl enable lab

                    su - ubuntu << EOF
                    cat <<EOL >> "$HOME/.bashrc"

                    alias ..='cd ..'
                    alias ...='cd ../..'
                    alias l='ls -lh'
                    alias ll='ls -alh'
                    alias stl='sudo systemctl'
                    alias jtl='sudo journalctl'
                    alias jtlf='sudo journalctl -fu'
                    alias cad='sudo vi /etc/caddy/Caddyfile'
                    alias pm='python3 manage.py'
                    alias gpl='git pull origin master'
                    EOL

                    cat <<EOL > "$HOME/deploy.sh"
                    #!/bin/bash

                    while ! mkdir "$HOME/deploy.lock" 2>/dev/null; do
                        echo "Waiting to acquire the lock"
                        sleep 5
                    done
                    trap 'rm -rf "$HOME/deploy.lock"' EXIT

                    cd "$HOME/${RepoName}"
                    git pull origin
                    git rev-parse HEAD > COMMIT.txt

                    sudo systemctl stop django celery beat
                    pip install -r requirements.txt
                    python3 manage.py migrate
                    sudo systemctl start django celery beat
                    EOL

                    chmod +x "$HOME/deploy.sh"
                    EOF

Outputs:
    LambdaFunctionUrl:
        Description: "URL of the Lambda function"
        Value: !GetAtt LambdaFunctionUrl.FunctionUrl